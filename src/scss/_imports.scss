// @charset 'utf-8';

/***********************
 * Asset Paths and CDN
 ***********************/

// This is the path to your asset folders. Uncomment and set to override the
// default. By default, it is set to look for assets one director up from the
// distributed.
// stylesheet '../' ex;
// $cdn: 'path/to/assets/';

// The CDN can be set to another local path, or, it can be set to the 'cdn'
// within the $variables map. This default uses jsDelivr to pull the assets
// from the patterns GitHub repository and the tag of the installed version.
// ex;
// @import 'config/variables';
// $cdn: map-get($variables, 'cdn');

// These are the default paths to the different asset types within the asset
// folder. Uncomment and set to override their defaults.
// $path-to-fonts: 'fonts/';
// $path-to-images: 'images/';
// $path-to-svg: 'svg/';

/*********
 * Fonts
 *********/

// If @font-face is used it needs to be imported before all other declarations.

@import 'elements/fonts/fonts';

/************************
 * External Dependencies
 ************************/

// Any external dependency can be included here. It may also make sense to
// include it within specific component and object styles if it is a dependency.
// Be sure to add 'node_modules' to your include paths if you are using npm to
// manage dependencies (recommended). Dependency examples include Bootstrap,
// Material Components Web, etc.

@import 'bourbon';
@import 'neat';
// global - end

/**********
* Elements
***********/

// Elements include universal styles, atomic patterns, and css systems. Examples
// include classes that assign color, modify the display of elements, or set up
// scaffolding like typography or grid systems. Uitilities will have their own
// namespace prefixes based on their attributes.

@import 'elements/base/base';
@import 'elements/divider/divider';
@import 'elements/icons/icons';

// elements - end

/*************
* Components
*************/

// Components are elements that require isolated styling. Examples include
// buttons, textfields, select boxes, grouped navigation, dropdowns, etc. They
// may include utilities within them. Not all components are required for each
// application. Component namespaces are prefixed with 'c-'.

@import 'components/hero/hero';
// components - end

/**********
 * Objects
 **********/

// Objects are elements with more robust styling requirements. They may include
// Components and utilities within them. Examples include headers, footers,
// modals, sliders, and charts. Not all Objects are required for each
// application and some will require their own Objects. Object namespaces are
// prefixed with 'o-'.

@import 'objects/navigation/navigation';
@import 'objects/inline-list/inline-list';
@import 'objects/container/container';

// objects - end

/************
 * Utilities
 ************/

@import 'utilities/color/color';
@import 'utilities/font/font';
@import 'utilities/typography/typography';
@import 'utilities/accessibility/accessibility';
@import 'utilities/offcanvas/offcanvas';

// utilities - end
